## Play to create a bridge interface which will be used with KVM VMs
## This play DELETES all existing NetworkManager connections and creates the required bridge
---
  ## To rerun pass clean=true as extra argument when running ansible playbook
  - name: Check if play has already run previously by checking if marker file exists
    ansible.builtin.stat:
      path: /var/log/ansibleMarkers/NetworkSetup.success
    register: network_setup_done  

  - name: Get all exsisting network manager connection
    ansible.builtin.shell: |
      nmcli -t -f NAME,DEVICE connection show 
    args:
      executable: /bin/bash
    register: nmcli_connections
    changed_when: false

  - name: Parse connections into a list and exclude loopbackup
    set_fact:
      connections_to_delete: >-
        {{
          nmcli_connections.stdout_lines
          | map('split', ':')
          | rejectattr('1', 'equalto', 'lo')
          | map('first')
          | list
        }}
    changed_when: false

  - name: Display filtered connections to delete
    debug: 
      var: connections_to_delete
    changed_when: false

## Below task dynamically gets the name of the physical nic to provide as slave to the bridge. First physical connection excluding wireless driver is used
## When running in a vm and not bare metal , modify shell command to below as we need to now switch logic to include virtual nics:
##    find /sys/class/net -type l -printf '%f\n' | grep -v wl
  - name: Get target interface
    ansible.builtin.shell: |
      find /sys/class/net -type l -printf '%f\n' | grep -v wl | grep en
    register: physical_nic
    changed_when: false

  - name: Set target interface
    set_fact:
      target_iface: "{{ physical_nic.stdout_lines[0] }}"
    changed_when: false

  - name: Display target interface
    debug:
      var: target_iface
    changed_when: false

  - name: Delete connections excluding loopback
    community.general.nmcli:
      conn_name: "{{ item }}"
      state: absent
    loop: "{{ connections_to_delete }}"
    when: not network_setup_done.stat.exists or clean == 'true'

## Static assignment can be done by changind "method4 to static" , uncommenting below comments and adding the values inline
## My case uses static dhcp leases so static assignement is not required
  - name: Create bridge interface br0 
    community.general.nmcli:
      conn_name: br0
      ifname: br0
      type: bridge
      stp: no
      autoconnect: yes
      state: present
      method4: auto
#      ip4: "{{ host_ip }}"
#      gw4: "{{ host_gateway }}"
#      dns4: "{{ host_dns }}"
    when: not network_setup_done.stat.exists or clean == 'true'

  - name: Add "{{ target_iface }}" as slave to br0
    community.general.nmcli:
      conn_name: br0-{{ target_iface }}
      ifname: "{{ target_iface }}"
      type: bridge-slave
      master: br0
      state: present
    when: not network_setup_done.stat.exists or clean == 'true'

  - name: Create dir to place marker file 
    ansible.builtin.file:
      path: /var/log/ansibleMarkers
      state: directory
      recurse: yes
      mode: '0700'
    when: not network_setup_done.stat.exists

  - name: Place marker file if all above succeeds
    ansible.builtin.file:
      path: /var/log/ansibleMarkers/NetworkSetup.success
      state: touch
      mode: '0600'
    when: not network_setup_done.stat.exists 
